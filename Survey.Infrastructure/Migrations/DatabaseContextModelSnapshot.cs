// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Survey.Infrastructure;

#nullable disable

namespace Survey.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Survey.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c3f4314-944d-4f77-b63b-abc123456789"),
                            QuestionId = new Guid("3b4a3749-53f4-4076-b519-b70a0df50f11"),
                            Text = "Очень доволен"
                        },
                        new
                        {
                            Id = new Guid("81e273bc-3bd7-4730-991c-abc12345678a"),
                            QuestionId = new Guid("3b4a3749-53f4-4076-b519-b70a0df50f11"),
                            Text = "Вполне доволен"
                        },
                        new
                        {
                            Id = new Guid("7c2d7d14-2e32-49c9-b76d-abc12345678b"),
                            QuestionId = new Guid("3b4a3749-53f4-4076-b519-b70a0df50f11"),
                            Text = "Не доволен"
                        },
                        new
                        {
                            Id = new Guid("a9c1d284-9142-48f1-a9f2-abc12345678e"),
                            QuestionId = new Guid("3b4a3749-53f4-4076-b519-b70a0df50f11"),
                            Text = "Совсем не доволен"
                        },
                        new
                        {
                            Id = new Guid("81b7e1d9-ec9f-41bb-8c91-abc12345678c"),
                            QuestionId = new Guid("a1fa8e7f-8b19-4897-b46d-991ff5178b52"),
                            Text = "Очень вероятно"
                        },
                        new
                        {
                            Id = new Guid("f7f9d140-9e88-45a2-bb3f-abc12345678d"),
                            QuestionId = new Guid("a1fa8e7f-8b19-4897-b46d-991ff5178b52"),
                            Text = "Скорее всего"
                        },
                        new
                        {
                            Id = new Guid("9d4d6f1b-bd94-40d2-988a-abc12345678f"),
                            QuestionId = new Guid("a1fa8e7f-8b19-4897-b46d-991ff5178b52"),
                            Text = "Маловероятно"
                        },
                        new
                        {
                            Id = new Guid("2b6cf581-987e-4f4e-b827-abc123456790"),
                            QuestionId = new Guid("a1fa8e7f-8b19-4897-b46d-991ff5178b52"),
                            Text = "Совсем не вероятно"
                        },
                        new
                        {
                            Id = new Guid("27a7d9e5-66b6-4d2d-8e55-abc123456791"),
                            QuestionId = new Guid("f8d6cb60-90f4-489f-83ff-2146eaf7c7a5"),
                            Text = "Очень доволен"
                        },
                        new
                        {
                            Id = new Guid("998cbb6c-9244-4f84-bc37-abc123456792"),
                            QuestionId = new Guid("f8d6cb60-90f4-489f-83ff-2146eaf7c7a5"),
                            Text = "Доволен"
                        },
                        new
                        {
                            Id = new Guid("d8349e1d-86f6-4e82-b57f-abc123456793"),
                            QuestionId = new Guid("f8d6cb60-90f4-489f-83ff-2146eaf7c7a5"),
                            Text = "Не доволен"
                        },
                        new
                        {
                            Id = new Guid("a4c1e354-6475-4873-b5f7-abc123456794"),
                            QuestionId = new Guid("f8d6cb60-90f4-489f-83ff-2146eaf7c7a5"),
                            Text = "Очень недоволен"
                        });
                });

            modelBuilder.Entity("Survey.Domain.Entities.Interview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("Survey.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b4a3749-53f4-4076-b519-b70a0df50f11"),
                            SurveyId = new Guid("c1a4e4bb-97a5-41d9-ae6d-96f51d123abc"),
                            Text = "Насколько вы довольны нашим сервисом?"
                        },
                        new
                        {
                            Id = new Guid("a1fa8e7f-8b19-4897-b46d-991ff5178b52"),
                            SurveyId = new Guid("c1a4e4bb-97a5-41d9-ae6d-96f51d123abc"),
                            Text = "Насколько вероятно, что вы нас порекомендуете?"
                        },
                        new
                        {
                            Id = new Guid("f8d6cb60-90f4-489f-83ff-2146eaf7c7a5"),
                            SurveyId = new Guid("a5d3b9e0-95a8-4a92-8b4d-d95b285ef123"),
                            Text = "Как вы относитесь к своей текущей роли?"
                        });
                });

            modelBuilder.Entity("Survey.Domain.Entities.Result", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InterviewId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Survey.Domain.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1a4e4bb-97a5-41d9-ae6d-96f51d123abc"),
                            Description = "Опрос для сбора отзывов клиентов.",
                            Title = "Опрос удовлетворённости клиентов"
                        },
                        new
                        {
                            Id = new Guid("a5d3b9e0-95a8-4a92-8b4d-d95b285ef123"),
                            Description = "Опрос для оценки вовлечённости сотрудников.",
                            Title = "Опрос вовлечённости сотрудников"
                        });
                });

            modelBuilder.Entity("Survey.Domain.Entities.Answer", b =>
                {
                    b.HasOne("Survey.Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Survey.Domain.Entities.Interview", b =>
                {
                    b.HasOne("Survey.Domain.Entities.Survey", "Survey")
                        .WithMany("Interviews")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Survey.Domain.Entities.Question", b =>
                {
                    b.HasOne("Survey.Domain.Entities.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Survey.Domain.Entities.Result", b =>
                {
                    b.HasOne("Survey.Domain.Entities.Interview", "Interview")
                        .WithMany("Results")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("Survey.Domain.Entities.Interview", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Survey.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Survey.Domain.Entities.Survey", b =>
                {
                    b.Navigation("Interviews");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
